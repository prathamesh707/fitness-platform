generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // or "mysql" if using MySQL
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscriptions PlanSubscription[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model FitnessPlan {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  category    String
  difficulty  Difficulty
  duration    Int        // days
  price       Float
  image       String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  workouts      Workout[]
  subscriptions PlanSubscription[]

  @@map("fitness_plans")
}

model Workout {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  duration    Int      // minutes
  calories    Int
  order       Int
  planId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plan      FitnessPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  exercises Exercise[]

  @@map("workouts")
}

model Exercise {
  id        String   @id @default(cuid())
  name      String
  sets      Int?
  reps      String?
  duration  Int?     // seconds
  rest      Int?     // seconds
  notes     String?
  order     Int
  workoutId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

model PlanSubscription {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan FitnessPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, planId])
  @@map("plan_subscriptions")
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}